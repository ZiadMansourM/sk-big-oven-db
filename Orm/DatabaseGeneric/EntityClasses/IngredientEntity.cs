//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Orm.HelperClasses;
using Orm.FactoryClasses;
using Orm.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Orm.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Ingredient'.<br/><br/></summary>
	[Serializable]
	public partial class IngredientEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private RecipeEntity _recipe;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static IngredientEntityStaticMetaData _staticMetaData = new IngredientEntityStaticMetaData();
		private static IngredientRelations _relationsFactory = new IngredientRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Recipe</summary>
			public static readonly string Recipe = "Recipe";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class IngredientEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public IngredientEntityStaticMetaData()
			{
				SetEntityCoreInfo("IngredientEntity", InheritanceHierarchyType.None, false, (int)Orm.EntityType.IngredientEntity, typeof(IngredientEntity), typeof(IngredientEntityFactory), false);
				AddNavigatorMetaData<IngredientEntity, RecipeEntity>("Recipe", "Ingredients", (a, b) => a._recipe = b, a => a._recipe, (a, b) => a.Recipe = b, Orm.RelationClasses.StaticIngredientRelations.RecipeEntityUsingRecipeIdStatic, ()=>new IngredientRelations().RecipeEntityUsingRecipeId, null, new int[] { (int)IngredientFieldIndex.RecipeId }, null, true, (int)Orm.EntityType.RecipeEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static IngredientEntity()
		{
		}

		/// <summary> CTor</summary>
		public IngredientEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public IngredientEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this IngredientEntity</param>
		public IngredientEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Ingredient which data should be fetched into this Ingredient object</param>
		public IngredientEntity(System.Guid id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Ingredient which data should be fetched into this Ingredient object</param>
		/// <param name="validator">The custom validator object for this IngredientEntity</param>
		public IngredientEntity(System.Guid id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected IngredientEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Recipe' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRecipe() { return CreateRelationInfoForNavigator("Recipe"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this IngredientEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static IngredientRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Recipe' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRecipe { get { return _staticMetaData.GetPrefetchPathElement("Recipe", CommonEntityBase.CreateEntityCollection<RecipeEntity>()); } }

		/// <summary>The Id property of the Entity Ingredient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ingredients"."id".<br/>Table field type characteristics (type, precision, scale, length): Uuid, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Guid Id
		{
			get { return (System.Guid)GetValue((int)IngredientFieldIndex.Id, true); }
			set	{ SetValue((int)IngredientFieldIndex.Id, value); }
		}

		/// <summary>The Ingredient property of the Entity Ingredient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ingredients"."ingredient".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 1000.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Ingredient
		{
			get { return (System.String)GetValue((int)IngredientFieldIndex.Ingredient, true); }
			set	{ SetValue((int)IngredientFieldIndex.Ingredient, value); }
		}

		/// <summary>The IsActive property of the Entity Ingredient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ingredients"."is_active".<br/>Table field type characteristics (type, precision, scale, length): Boolean, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsActive
		{
			get { return (System.Boolean)GetValue((int)IngredientFieldIndex.IsActive, true); }
			set	{ SetValue((int)IngredientFieldIndex.IsActive, value); }
		}

		/// <summary>The RecipeId property of the Entity Ingredient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ingredients"."recipe_id".<br/>Table field type characteristics (type, precision, scale, length): Uuid, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid RecipeId
		{
			get { return (System.Guid)GetValue((int)IngredientFieldIndex.RecipeId, true); }
			set	{ SetValue((int)IngredientFieldIndex.RecipeId, value); }
		}

		/// <summary>Gets / sets related entity of type 'RecipeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RecipeEntity Recipe
		{
			get { return _recipe; }
			set { SetSingleRelatedEntityNavigator(value, "Recipe"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Orm
{
	public enum IngredientFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>Ingredient. </summary>
		Ingredient,
		///<summary>IsActive. </summary>
		IsActive,
		///<summary>RecipeId. </summary>
		RecipeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Orm.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Ingredient. </summary>
	public partial class IngredientRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between IngredientEntity and RecipeEntity over the m:1 relation they have, using the relation between the fields: Ingredient.RecipeId - Recipe.Id</summary>
		public virtual IEntityRelation RecipeEntityUsingRecipeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Recipe", false, new[] { RecipeFields.Id, IngredientFields.RecipeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticIngredientRelations
	{
		internal static readonly IEntityRelation RecipeEntityUsingRecipeIdStatic = new IngredientRelations().RecipeEntityUsingRecipeId;

		/// <summary>CTor</summary>
		static StaticIngredientRelations() { }
	}
}
